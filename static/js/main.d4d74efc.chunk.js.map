{"version":3,"sources":["panels/Panel.js","components/Torps.js","components/StatusGauge.js","panels/Status.js","panels/Sector.js","panels/Galaxy.js","panels/Messages.js","panels/Viewer.js","components/StatusBar.js","panels/Commands.js","panels/Systems.js","panels/Badge.js","components/CommandPanel.js","panels/Coords.js","commands/MoveQuad.js","commands/MoveSector.js","App.js","serviceWorker.js","index.js"],"names":["Panel","_this$props","this","props","children","panelName","double","tall","dim","xs","md","lg","className","react_default","a","createElement","Col","Component","Torps","value","torps","i","push","key","StatusGauge","context","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","energy","bind","assertThisInitialized","label","Gauge_default","width","height","min","max","color","minMaxLabelStyle","display","Status","stardate","status","statusText","statusColour","shields","warp","mongols","panels_Panel","components_StatusGauge","components_Torps","Sector","click","handleClick","state","clicky","undefined","x","y","_this2","sector","location","dest","quad","destQuad","clickyCell","sectorCells","j","sectorRows","_loop","cells","_loop2","onClick","Galaxy","shipName","galaxy","galaxyCells","galaxyRows","cell","currentSector","clickySector","destSector","stars","mongs","bases","Messages","messagesData","messages","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","messageData","dept","date","mesg","toLowerCase","err","return","Viewer","viewer","travelling","src","alt","StatusBar","es","percent","strokeWidth","strokeColor","Commands","eff","temp","components_StatusBar","Button_default","variant","handleCommandPanelClick","Systems","lifeSupport","lasers","impulse","shortRange","longRange","computer","Badge","shipReg","badge","CommandPanel","selectCommand","selectedCommandComponent","show","close","commandComponents","commands","map","command","component","name","Modal_default","size","onHide","Body","Row","Footer","Coords","MoveQuad","handleSectorClick","setState","action","noGutters","panels_Sector","objectSpread","panels_Coords","MoveSector","handleGalaxyClick","moveButton","moveButtonInactive","disabled","moveButtonRender","panels_Galaxy","App","handleCommandPanelClose","handleMoveQuad","handleMoveSector","setTravelling","setEnergy","setStardate","addMessage","dimPanels","dimAll","game","systems","player","travellling","commandPanelShow","_this3","distance","Math","sqrt","pow","commandComponent","result","_this4","parseFloat","travelTime","toFixed","setTimeout","energyUsed","travellingness","change","arguments","length","parseInt","duration","text","console","log","panels","dimness","newDim","except","filter","panel","indexOf","_this$state","commands_MoveSector","commands_MoveQuad","Container","panels_Status","panels_Messages","panels_Viewer","panels_Commands","panels_Systems","panels_Badge","components_CommandPanel","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d4d74efc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Col} from 'react-bootstrap';\n\nclass Panel extends Component { \n  render() {\n    const {children, panelName, double, tall, dim, xs, md, lg} = this.props;\n    let className = 'panel';\n\n    if(panelName) {\n      className += ' panel--' + panelName;\n    }\n\n    if(double) {\n      className += ' panel--double';\n    }\n\n    if(tall) {\n      className += ' panel--tall';\n    }\n\n    if(dim) {\n      className += ' panel--dim';\n    }\n\n    return (\n        <Col className={className} xs={xs} md={md} lg={lg}>\n          <div className=\"panel__inner\">\n            {children}\n          </div>\n        </Col>\n    );\n  }\n}\n\nexport default Panel;\n","import React, { Component } from 'react';\n\nclass Torps extends Component { \n    render() {\n        const {value} = this.props;\n        let torps = [];\n\n        for(let i = 0; i < value; i++) {\n            torps.push(<span key={'torp_' + i}>*</span>);\n        }\n\n        return (\n            <div className={'block__torps'}>{torps}</div>\n        );\n    }\n}\n\nexport default Torps;\n","import React, { Component } from 'react';\nimport Gauge from 'react-svg-gauge';\n\nclass StatusGauge extends Component {\n    constructor(props, context) {\n        super(props, context);\n    \n        this.energy = this.energy.bind(this);\n    }\n\n    energy(value) {\n        if(value <= 25) {\n            return '#ff0000';\n        }\n        \n        if(value <= 50) {\n            return '#ff7700';\n        }\n        \n        if(value <= 75) {\n            return '#ffff00';\n        }\n\n        return '#00aa00';\n    }\n\n    render() {\n        const {label, value} = this.props;\n\n        return (\n            <Gauge\n                label={label}\n                width={96}\n                height={80}\n                min={0}\n                max={100}\n                value={value}\n                color={this.energy(value)}\n                minMaxLabelStyle={{'display': 'none'}}\n            />\n        );\n    }\n}\n\nexport default StatusGauge;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\nimport Torps from '../components/Torps';\nimport StatusGauge from '../components/StatusGauge';\n\nclass Status extends Component {\n    render() {\n        const {value, dim, xs, md, lg} = this.props;\n        const {stardate, status, statusText, statusColour, energy, shields, torps, warp, mongols} = value;\n    \n        return (\n            <Panel panelName=\"status\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"3\"}>\n                <div className=\"block__statusPanel block__statusPanel--date\">\n                    <span>Date:</span>\n\n                    <span>{stardate}</span>\n                </div>\n\n                <div className={'block__statusPanel block__statusPanel--' + status +\n                    'block__statusPanel--' + statusColour}>\n                    {statusText}\n                </div>\n\n                <div className=\"block__gauge block__gauge--energy\">\n                    <StatusGauge\n                        label={'Energy'}\n                        value={energy}\n                    />\n                </div>\n\n                <div className=\"block__gauge block__gauge--shields\">\n                    <StatusGauge\n                        label={'Shields'}\n                        value={shields}\n                    />\n                </div>\n\n                <div className=\"block__statusPanel block__statusPanel--torps\">\n                    <Torps value={torps} />\n                </div>\n\n                <div className=\"block__statusPanel block__statusPanel--warp\">\n                    <span>Warp: {warp}</span>\n                </div>\n\n                <div className=\"block__statusPanel block__statusPanel--mongols\">\n                    <span>Mongols: {mongols}</span>\n                </div>\n            </Panel>\n        );\n    }\n}\n\nexport default Status;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Sector extends Component {\n    constructor(props, context) {\n        super(props, context);\n        const {click} = this.props;\n    \n        this.handleClick = this.handleClick.bind(this);\n\n        this.state = {\n            clicky : ! (click === undefined || click === null),\n        }\n    }        \n    \n    handleClick(x, y) {\n        const {clicky} = this.state;\n\n        if(clicky) {\n            const {click} = this.props;\n\n            click(x, y);\n        }\n    }\n\n    render() {\n        const {clicky} = this.state;\n        const {value, dim, xs, md, lg} = this.props;\n        const {sector, location, dest} = value;\n        const {quad} = location;\n        const destQuad = dest.quad;\n\n        let clickyCell = clicky ? ' td__sectorCell--clicky' : '';\n        let sectorCells = [];\n\n        for(let j = 1; j <= 8; j++) {\n            sectorCells.push(\n                <td className=\"td__sectorCoord\" key={'sectorCell_' + j}>{j}</td>\n            );\n        }\n\n        let sectorRows = [\n            <tr className=\"tr__sectorheading\" key={'galaxyRow_0'}>\n                <td key={'sectorCell_0'}>&nbsp;</td>\n                \n                {sectorCells}\n            </tr>,\n        ];\n\n        for(let i = 0; i < 8; i++) {\n            let cells = [];\n\n            for(let j = 1; j <= 8; j++) {\n                if(j === quad.x && (i + 1) === quad.y) {\n                    cells.push(\n                        <td onClick={ () => { this.handleClick(j, i + 1); } } className={'td__sectorCell td__sectorCell--current' + clickyCell} key={'sectorCell_' + j}>\n                            X\n                        </td>\n                    );\n                } else {\n                    if(j === destQuad.x && (i + 1) === destQuad.y) {\n                        cells.push(\n                            <td onClick={ () => { this.handleClick(j, i + 1); } } className={'td__sectorCell td__sectorCell--dest' + clickyCell} key={'sectorCell_' + j}>\n                                X\n                            </td>\n                        );\n                    } else {\n                        cells.push(\n                            <td onClick={ () => { this.handleClick(j, i + 1); } } className={'td__sectorCell' + clickyCell} key={'sectorCell_' + j}>\n                                {sector[i][j -1]}\n                            </td>\n                        );\n                    }\n                }\n            }\n\n            sectorRows.push(\n                <tr className=\"tr__sectorcontent\" key={'galaxyRow_' + (i + 1)}>\n                    <td className=\"td__sectorCoord\">{i+1}</td>\n\n                    {cells}\n                </tr>\n            );\n        }\n\n        return (\n            <Panel panelName=\"sector\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"3\"}>\n                <table className=\"table__sector\">\n                    <tbody>\n                        {sectorRows}\n                    </tbody>\n                </table>\n            </Panel>\n        );\n    }\n}\n\nexport default Sector;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Galaxy extends Component {\n    constructor(props, context) {\n        super(props, context);\n        const {click} = this.props;\n    \n        this.handleClick = this.handleClick.bind(this);\n\n        this.state = {\n            clicky : ! (click === undefined || click === null),\n        }\n    }        \n    \n    handleClick(x, y) {\n        const {clicky} = this.state;\n\n        if(clicky) {\n            const {click} = this.props;\n\n            click(x, y);\n        }\n    }\n\n    render() {\n        const {clicky} = this.state;\n        const {value, dim, xs, md, lg} = this.props;\n        const {shipName, location, galaxy, dest} = value;\n        const {sector} = location;\n\n        let galaxyCells = [];\n\n        for(let j = 1; j <= 8; j++) {\n            galaxyCells.push(<td className=\"td__galaxyCoord\" key={'galaxyCell_' + j}>{j}</td>);\n        }\n\n        let galaxyRows = [\n            <tr className=\"tr__galaxyheading\" key={'galaxyRow_0'}>\n                <td key={'galaxyCell_0'}>&nbsp;</td>\n                \n                {galaxyCells}\n            </tr>,\n        ];\n\n        for(let i = 0; i < 8; i++) {\n            let cells = [];\n\n            for(let j = 1; j <= 8; j++) {\n                let cell = galaxy[i][j-1];\n\n                let currentSector = ( (i + 1) === location.sector.x && j === location.sector.y ) ? \n                    ' td__galaxyCell--current' : '';\n                let clickySector = clicky ? ' td__galaxyCell--clicky' : '';\n                let destSector = ( (i + 1) === dest.sector.x && j === dest.sector.y ) ? \n                    ' td__galaxyCell--dest' : '';\n\n                cells.push(\n                    <td\n                        onClick={() => { this.handleClick(i + 1, j); } }\n                        className={'td__galaxyCell' + currentSector + clickySector + destSector}\n                        key={'galaxyCell_' + j}\n                    >\n                        <span className=\"span__galaxyCellStat\">{cell.stars}</span>\n                        <span className=\"span__galaxyCellStat\">{cell.mongs}</span>\n                        <span className=\"span__galaxyCellStat\">{cell.bases}</span>\n                    </td>\n                );\n            }\n\n            galaxyRows.push(\n                <tr className=\"tr__galaxycontent\" key={'galaxyRow_' + (i + 1)}>\n                    <td className=\"td__galaxyCoord\" key={'galaxyRow_0'}>{i + 1}</td>\n\n                    {cells}\n                </tr>\n            );\n        }\n\n        return (\n            <Panel panelName=\"galaxy\" dim={dim} double={true} xs={xs ? xs : \"12\"} md={md ? md : \"12\"} lg={lg ? lg :\"6\"}>\n                <h2>Chart of Known Galaxy</h2>\n\n                <table className=\"table__galaxy\">\n                    <tbody>\n                        {galaxyRows}\n                    </tbody>\n                </table>\n\n                <p>{shipName} in quad {sector.x}-{sector.y}</p>\n            </Panel>\n        );\n    }\n}\n\nexport default Galaxy;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Messages extends Component { \n  render() {\n    const {value, dim, xs, md, lg} = this.props;\n    const {messagesData} = value;\n\n    let messages = [];\n\n    let i = 0; // this is the best way as we only increment when we add\n    for(let messageData of messagesData) {\n      if(messageData.dept && messageData.date && messageData.mesg) {\n        messages.push(\n          <div className={'block__message block__message--' + messageData.dept.toLowerCase()} key={'message' + i}>\n            <span>{messageData.date}</span>\n\n            <h2>{messageData.dept}</h2>\n\n            <p>{messageData.mesg}</p>\n          </div>\n        );\n\n        i++;\n      }\n    }\n\n    return (\n      <Panel panelName=\"messages\" double={true} tall={true} dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"12\"} lg={lg ? lg :\"6\"}>\n        {messages}\n      </Panel>\n    );\n  }\n}\n\nexport default Messages;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Viewer extends Component { \n  render() {\n    const {dim, xs, md, lg, travelling} = this.props;\n    // const {xxx} = value;\n\n    const viewer = travelling ? (\n      <div className=\"block__viewScreen\">\n          \n        <img src=\"/img/travelling.gif\" alt=\"Moving starfield...\" className=\"img__travelling\" />\n      \n      </div>\n    ) : (\n      <div className=\"block__viewScreen\">\n          \n        <div className=\"block__viewScreenLayer block__viewScreenLayer--1\">\n        </div>\n      \n        <div className=\"block__viewScreenLayer block__viewScreenLayer--2\">\n        </div>\n      \n        <div className=\"block__viewScreenLayer block__viewScreenLayer--3\">\n        </div>\n      \n        <div className=\"block__viewScreenLayer block__viewScreenLayer--4\">\n        </div>\n      \n      </div>\n    );\n\n    return (\n        <Panel panelName=\"viewer\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"6\"}>\n          <h2>Main Viewer</h2>\n\n          {viewer}\n        </Panel>\n    );\n  }\n}\n\nexport default Viewer;\n","import React, { Component } from 'react';\nimport { Line } from 'rc-progress';\n\nclass StatusBar extends Component { \n    render() {\n        const {value} = this.props;\n\n        return (\n            <Line percent={value} strokeWidth=\"8\" strokeColor=\"#ffffff\" />\n        );\n    }\n}\n\nexport default StatusBar;\n","import React, { Component } from 'react';\nimport {Col} from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport StatusBar from '../components/StatusBar';\n\nclass Commands extends Component { \n  render() {\n    const {value, dim, xs, md, lg} = this.props;\n    const {eff, temp} = value;\n    \n    let className = 'panel panel--commands';\n    if(dim) {\n        className += ' panel--dim';\n    }\n\n    return (\n        <Col className={className} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"6\"}>\n            <div className=\"panel__inner panel__inner--short panel__inner--lasers\">\n                <h2>Lasers</h2>\n\n                <table>\n                    <tbody>\n                        <tr>\n                            <td>Eff.</td>\n                            <td><StatusBar value={eff} /></td>\n                        </tr>\n\n                        <tr>\n                            <td>Temp.</td>\n                            <td><StatusBar value={temp} /></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n\n            <div className=\"panel__inner panel__inner--short panel__inner--commands\">\n                 <Button variant=\"light\" onClick={this.props.handleCommandPanelClick}>\n                    Command Panel\n                </Button>\n            </div>\n        </Col>\n    );\n  }\n}\n\nexport default Commands;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\nimport StatusBar from '../components/StatusBar';\n\nclass Systems extends Component { \n  render() {\n    const {value, dim, xs, md, lg} = this.props;\n    const {energy, shields, lifeSupport, lasers, torps,\n        warp, impulse, shortRange, longRange, computer} = value;\n\n    return (\n        <Panel panelName=\"systems\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"6\"}>\n            <h2>Systems Status</h2>\n\n            <table className=\"table__systems\">\n                <tbody>\n                    <tr>\n                        <td>Energy Converter</td>\n                        <td><StatusBar value={energy} /></td>\n                    </tr>\n                    <tr>\n                        <td>Shields</td>\n                        <td><StatusBar value={shields} /></td>\n                    </tr>\n                    <tr>\n                        <td>Life Support</td>\n                        <td><StatusBar value={lifeSupport} /></td>\n                    </tr>\n                    <tr>\n                        <td>Lasers</td>\n                        <td><StatusBar value={lasers} /></td>\n                    </tr>\n                    <tr>\n                        <td>Torpedos</td>\n                        <td><StatusBar value={torps} /></td>\n                    </tr>\n                    <tr>\n                        <td>Warp Engines</td>\n                        <td><StatusBar value={warp} /></td>\n                    </tr>\n                    <tr>\n                        <td>Impulse Engines</td>\n                        <td><StatusBar value={impulse} /></td>\n                    </tr>\n                    <tr>\n                        <td>Short Range Scanner</td>\n                        <td><StatusBar value={shortRange} /></td>\n                    </tr>\n                    <tr>\n                        <td>Long Range Scanner</td>\n                        <td><StatusBar value={longRange} /></td>\n                    </tr>\n                    <tr>\n                        <td>Main Computer</td>\n                        <td><StatusBar value={computer} /></td>\n                    </tr>\n                </tbody>\n            </table>\n        </Panel>\n    );\n  }\n}\n\nexport default Systems;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Badge extends Component { \n  render() {\n    const {value, dim, xs, md, lg} = this.props;\n    const {shipName, shipReg, badge, dept} = value;\n    \n    return (\n        <Panel panelName=\"badge\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"3\"}>\n          <h2>{shipName}</h2>\n          <p>{shipReg}</p>\n\n          <img src={badge} className=\"img__badge\" alt={shipName + ' badge'} />\n\n          <p>{dept}</p>\n        </Panel>\n      );\n  }\n}\n\nexport default Badge;\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport {Row, Col} from 'react-bootstrap';\n\nclass CommandPanel extends Component {\n    render() {\n        const {selectCommand, selectedCommandComponent, show, close, commands} = this.props;\n\n        const commandComponents = commands.map(\n            (command, i) => {\n                return (\n                    <li key={'command_' + i}>\n                        <Button onClick={() => {selectCommand(command.component)}}>\n                            {command.name}\n                        </Button>\n                    </li>\n                );\n            }\n        );\n\n        return (\n            <Modal size=\"lg\" className='modal__commands' show={show} onHide={close}>\n                <Modal.Body>\n                    <Row>\n                        <Col className={'block__commandList'} xs=\"3\">\n                            <ul>\n                                {commandComponents}\n                            </ul>\n                        </Col>\n\n                        <Col className={'block__commandShow'} xs=\"9\">\n                            {selectedCommandComponent}\n                        </Col>\n                    </Row>\n                </Modal.Body>\n\n                <Modal.Footer>\n                <Button variant=\"secondary\" onClick={close}>\n                    Close\n                </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default CommandPanel;\n","import React, { Component } from 'react';\nimport Panel from './Panel';\n\nclass Coords extends Component { \n  render() {\n    const {dim, xs, md, lg} = this.props;\n    \n    return (\n        <Panel panelName=\"coords\" dim={dim} xs={xs ? xs : \"12\"} md={md ? md : \"6\"} lg={lg ? lg :\"3\"}>\n          <h2>Sector / Quadrant</h2>\n        </Panel>\n      );\n  }\n}\n\nexport default Coords;\n","import React, { Component } from 'react';\nimport {Row} from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Sector from '../panels/Sector';\nimport Coords from '../panels/Coords';\n\nclass MoveQuad extends Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleSectorClick = this.handleSectorClick.bind(this);\n\n        this.state = {\n            dest: {\n                quad: {\n                    x: null,\n                    y: null,\n                },\n                sector: {\n                    x: null,\n                    y: null,\n                },\n            }\n        }\n    }\n\n    // I know you can do these with spreads, but they're bloody unreadable\n    handleSectorClick(x, y) {\n        const {dest} = this.state;\n\n        this.setState({\n            dest: {\n                quad: {\n                    x: x,\n                    y: y,\n                },\n                sector: dest.sector,\n            },\n        });\n    }\n\n    render() {\n        const {dest} = this.state;\n        const {value, action} = this.props;\n\n        return (\n            <div>\n                <h2>Move Within Sector</h2>\n\n                <Row noGutters={true}>\n                    <Sector value={{...value, ...{dest: dest}}} click={this.handleSectorClick} xs=\"12\" md=\"6\" lg=\"6\" />\n\n                    <Coords xs=\"12\" md=\"6\" lg=\"6\" />\n                </Row>\n\n                <Button onClick={() => {action(dest); }}>Move</Button>\n            </div>\n        );\n    }\n}\n\nexport default MoveQuad;\n","import React, { Component } from 'react';\nimport {Row} from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport Sector from '../panels/Sector';\nimport Coords from '../panels/Coords';\nimport Galaxy from '../panels/Galaxy';\n\nclass MoveSector extends Component {\n    constructor(props, context) {\n        super(props, context);\n\n        this.handleGalaxyClick = this.handleGalaxyClick.bind(this);\n        this.handleSectorClick = this.handleSectorClick.bind(this);\n\n        this.state = {\n            dest: {\n                quad: {\n                    x: null,\n                    y: null,\n                },\n                sector: {\n                    x: null,\n                    y: null,\n                },\n            }\n        }\n    }\n\n    // I know you can do these with spreads, but they're bloody unreadable\n    handleGalaxyClick(x, y) {\n        const {dest} = this.state;\n\n        this.setState({\n            dest: {\n                quad: dest.quad,\n                sector: {\n                    x: x,\n                    y: y,\n                },\n            },\n        });\n    }\n\n    handleSectorClick(x, y) {\n        const {dest} = this.state;\n\n        this.setState({\n            dest: {\n                quad: {\n                    x: x,\n                    y: y,\n                },\n                sector: dest.sector,\n            },\n        });\n    }\n\n    render() {\n        const {dest} = this.state;\n        const {value, action} = this.props;\n\n        const moveButton = (<Button onClick={() => {action(dest); }}>Move</Button>);\n        const moveButtonInactive = (<Button disabled>Move</Button>);\n\n        const moveButtonRender = (\n            dest.sector.x !== null &&\n            dest.sector.y !== null &&\n            dest.quad.x !== null &&\n            dest.quad.y !== null\n        ) ? moveButton : moveButtonInactive;\n\n        return (\n            <div>\n                <h2>Move Within Galaxy</h2>\n\n                <Row noGutters={true}>\n                    <Galaxy value={{...value, ...{dest: dest}}} click={this.handleGalaxyClick} xs=\"12\" md=\"12\" lg=\"12\" />\n                </Row>\n\n                <Row noGutters={true}>\n                    <Sector value={{...value, ...{dest: dest}}} click={this.handleSectorClick} xs=\"12\" md=\"6\" lg=\"6\" />\n\n                    <Coords xs=\"12\" md=\"6\" lg=\"6\" />\n                </Row>\n\n                {moveButtonRender}\n            </div>\n        );\n    }\n}\n\nexport default MoveSector;\n","import React, { Component } from 'react';\nimport './scss/style.scss';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport Status from './panels/Status.js';\nimport Sector from './panels/Sector.js';\nimport Galaxy from './panels/Galaxy.js';\nimport Messages from './panels/Messages.js';\nimport Viewer from './panels/Viewer.js';\nimport Commands from './panels/Commands.js';\nimport Systems from './panels/Systems.js';\nimport Badge from './panels/Badge.js';\nimport CommandPanel from './components/CommandPanel.js';\nimport MoveQuad from './commands/MoveQuad.js';\nimport MoveSector from './commands/MoveSector.js';\n\nclass App extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleCommandPanelClick = this.handleCommandPanelClick.bind(this);\n    this.handleCommandPanelClose = this.handleCommandPanelClose.bind(this);\n    this.selectCommand = this.selectCommand.bind(this);\n    this.handleMoveQuad = this.handleMoveQuad.bind(this);\n    this.handleMoveSector = this.handleMoveSector.bind(this);\n    this.travelling = this.travelling.bind(this);\n    this.setTravelling = this.setTravelling.bind(this);\n    this.setEnergy = this.setEnergy.bind(this);\n    this.setStardate = this.setStardate.bind(this);\n    this.addMessage = this.addMessage.bind(this);\n\n    this.dimPanels = this.dimPanels.bind(this);\n    this.dimAll = this.dimAll.bind(this);\n\n    // this will eventually be the default state\n    // and commands will update it\n    let player = {\n      location : {\n        sector: {\n          x: 6,\n          y: 3,\n        },\n        quad: {\n          x: 3,\n          y: 5,\n        },\n      },\n      dest : {\n        sector: {\n          x: null,\n          y: null,\n        },\n        quad: {\n          x: null,\n          y: null,\n        },\n      },\n      travellling: false,\n    };\n\n    let game = {\n      badge: {\n        shipName : 'USS Lexington',\n        shipReg: 'RCB-92',\n        badge: 'img/badge.png',\n        dept: 'Dept. of Space',\n      },\n      commands: {\n        eff: 50,\n        temp: 0,\n      },\n      galaxy: [],\n      messages: {\n        messagesData: [\n          {\n            dept: 'Science',\n            date: '3560.2',\n            mesg: 'Scanners show no enemy ships in this quadrant.',\n          },\n          {\n            dept: 'Damage',\n            date: '3564.1',\n            mesg: 'Energy Converter failing, now at 56%',\n          },\n          {\n            dept: 'Communications',\n            date: '3564.2',\n            mesg: 'The Starbase in 6-6 reports it is under attack. They can last until 3568.3.',\n          },\n          {\n            dept: 'Tactical',\n            date: '3565.6',\n            mesg: 'There are Mongols off the starboard bow, starboard bow, starboard bow',\n          },\n        ],\n      },\n      sector: [],\n      status: {\n        stardate: 3500.0,\n        status: 'alert',\n        statusColour: 'red',\n        statusText: (<span>&raquo;&raquo; Alert &laquo;&laquo;</span>),\n        energy: 100,\n        shields: 100,\n        torps: 9,\n        warp: 1.0,\n        mongols: 23,\n      },\n      systems: {\n        energy: 100,\n        shields: 100,\n        lifeSupport: 100,\n        lasers: 100,\n        torps: 100,\n        warp: 100,\n        impulse: 100,\n        shortRange: 100,\n        longRange: 100,\n        computer: 100,\n      },\n      viewer: {\n      },\n    }\n\n    for(let i = 0; i < 8; i++) {\n      let cells = [];\n\n      for(let j = 0; j < 8; j++) {\n        let cell = {\n          stars: 0,\n          mongs: 0,\n          bases: 0,\n        };\n\n        cells.push(cell);\n      }\n\n      game.galaxy.push(cells);\n    }\n\n    for(let i = 0; i < 8; i++) {\n      let cells = [];\n\n      for(let j = 0; j < 8; j++) {\n        let cell = '.';\n\n        cells.push(cell);\n      }\n\n      game.sector.push(cells);\n    }\n\n    let dim = {\n      badge: false,\n      commands: false,\n      galaxy: false,\n      messages: false,\n      sector: false,\n      status: false,\n      systems: false,\n      viewer: false,\n    }\n\n    this.state = {\n      dim: dim,\n      game: game,\n      player: player,\n      commandPanelShow: true,\n    }\n  }\n\n  handleMoveQuad(dest) {\n    let {player} = this.state;\n    player.location = dest;\n    player.dest = {\n      sector: {\n        x: null,\n        y: null,\n      },\n      quad: {\n        x: null,\n        y: null,\n      },\n    };\n\n    const result = () => {\n        this.setState({\n        player: player,\n        commandPanelShow: false,\n        selectedCommandComponent: null,\n      });\n    };\n\n    this.travelling(1, result);\n  }\n\n  handleMoveSector(dest) {\n    let {player} = this.state;\n    const {location} = player;\n    const distance = Math.sqrt(\n      Math.pow(location.sector.x - dest.sector.x, 2) +\n      Math.pow(location.sector.y - dest.sector.y, 2)\n    );\n\n    player.location = dest;\n    player.dest = {\n      sector: {\n        x: null,\n        y: null,\n      },\n      quad: {\n        x: null,\n        y: null,\n      },\n    };\n    \n    const result = () => {\n      this.setState({\n        player: player,\n        commandPanelShow: false,\n        selectedCommandComponent: null,\n      });\n    };\n\n    this.travelling(distance, result);\n  }\n\n  handleCommandPanelClick() {\n    this.setState({\n      commandPanelShow: true,\n    });\n  }\n\n  handleCommandPanelClose() {\n    this.setState({\n      commandPanelShow: false,\n    });\n  }\n\n  selectCommand(commandComponent) {\n    this.setState({\n        selectedCommandComponent: commandComponent,\n    });\n  }\n\n  travelling(distance, result) {\n    const {game} = this.state, warp = parseFloat(game.status.warp);\n    const travelTime = ((10 - warp) * distance / 10).toFixed(1);\n\n    this.handleCommandPanelClose();\n    this.dimAll(true, ['viewer']);\n    this.setTravelling(true);\n\n    setTimeout( () => {\n      const energyUsed = distance * warp * -1;\n      \n      this.dimAll(false);\n      this.setTravelling(false);\n      this.setEnergy(energyUsed);\n      this.setStardate(travelTime);\n      this.addMessage('Energy used: ' + (0 - energyUsed) + ', duration: ' + travelTime);\n  \n      result();  \n    }, travelTime * 1000);\n  }\n\n  setTravelling(travellingness) {\n    let {player} = this.state;\n    player.travellling = travellingness;\n\n    this.setState({player});\n  }\n\n  setEnergy(change = 0) {\n    let {game} = this.state;\n    game.status.energy = parseInt(game.status.energy) + parseInt(change);\n\n    if(game.status.energy > 100) {\n      game.status.energy = 100;\n    } else if (game.status.energy < 0) {\n      game.status.energy = 0;\n    }\n\n    this.setState({game})\n  }\n\n  setStardate(duration = 0) {\n    let {game} = this.state;\n    game.status.stardate = parseFloat(game.status.stardate) + parseFloat(duration);\n    \n    this.setState({game})\n  }\n\n  addMessage(text) {\n    console.log(text)\n  }\n\n  dimPanels(panels, dimness) {\n    const {dim} = this.state;\n    let newDim = [];\n\n    for(let panel of panels) {\n      newDim[panel] = dimness;\n    }\n\n    this.setState({\n      dim: {...dim, ...newDim},\n    });\n  }\n\n  dimAll(dimness, except = []) {\n    const panels = [\n      'badge',\n      'commands',\n      'galaxy',\n      'messages',\n      'sector',\n      'status',\n      'systems',\n      'viewer',\n    ];\n\n    if(except.length === 0) {\n      this.dimPanels(panels, dimness);\n    } else {\n      const dimPanels = panels.filter( (panel) => {\n        return (except.indexOf(panel) === -1);\n      });\n  \n      this.dimPanels(dimPanels, dimness);\n    }\n  }\n\n  render() {\n    // it seems mental doing it like this now, but bear with me\n    const {game, player, dim, selectedCommandComponent} = this.state;\n    const {badge, commands, galaxy, messages, sector, status, systems, viewer} = game;\n\n    const commandComponents = [\n      {\n        name: 'Move within galaxy',\n        component:\n          <MoveSector value={{galaxy: galaxy, sector: sector, location: player.location}} action={this.handleMoveSector} />,\n      },\n      {\n        name: 'Move within sector',\n        component:\n          <MoveQuad value={{sector: sector, location: player.location}} action={this.handleMoveQuad} />,\n      },\n    ];\n\n    return (\n      <div>\n        <Container className=\"no-gutters container__game\">\n          <Row>\n            <Galaxy\n              dim={dim.galaxy}\n              value={{galaxy: galaxy, location: player.location, dest: player.dest}}\n            />\n\n            <Status\n              dim={dim.status}\n              value={status}\n            />\n\n            <Sector\n              dim={dim.sector}\n              value={{sector: sector, location: player.location, dest: player.dest}}\n            />\n          </Row>\n          \n          <Row>\n            <Messages\n              dim={dim.messages}\n              value={messages}\n            />\n\n            <Col className=\"unit unit--tall\" xs=\"12\" md=\"12\" lg=\"6\">\n              <Row>\n                <Viewer\n                  travelling={player.travellling}\n                  dim={dim.viewer}\n                  value={viewer}\n                />\n            \n                <Commands\n                  dim={dim.commands}\n                  commands={commandComponents}\n                  handleCommandPanelClick={this.handleCommandPanelClick} \n                  value={commands}\n                />\n              </Row>\n\n              <Row>\n                <Systems\n                  dim={dim.systems}\n                  value={systems}\n                />\n            \n                <Badge\n                  dim={dim.badge}\n                  value={badge}\n                />\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n\n        <CommandPanel\n          commands={commandComponents}\n          selectCommand={this.selectCommand}\n          selectedCommandComponent={selectedCommandComponent}\n          show={this.state.commandPanelShow}\n          close={this.handleCommandPanelClose}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}